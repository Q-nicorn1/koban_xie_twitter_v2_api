   #instal packages
import api_wrapper as api
import os
import pandas as pd
import time
!pip install requests tweepy

#pull some twitter accounts
token = '*******'
os.environ["BEARER_TOKEN"] = token

seed_accounts =  pd.read_csv('data/seed_accounts.csv')
seed_accounts = seed_accounts['screen_name'].tolist()
seed_accounts = seed_accounts[0:20]
seed_accounts


#Pull Botometer scores for the sample twitter accounts
! pip install botometer
import botometer

rapidapi_key = "0e41cd5025msh03caac04e473545p158307jsna283b6f51065"
twitter_app_auth = {
    'consumer_key': 'sUTnXUM8Kpz5ZOdKF6iZvddFA',
    'consumer_secret': 'bOC0JMvFyfiV8IZmoQDouyVnbaiM1L4FtjOHNEb5068eaPiWcp',
    'access_token': '1497042865-8KN1Bt1tdUvhFpfoigtpPS4hsEZrkZzE0E3IeBU',
    'access_token_secret': '9rYAyfwVnnrlvEXGnK3Z8dq4Y5AAc4GH8ypl79cedZQcq',
  }
bom = botometer.Botometer(wait_on_ratelimit=True,
                          rapidapi_key=rapidapi_key,
                          **twitter_app_auth)
                          
botometer_score = []
i = 0
for screen_name in seed_accounts:
    i+=1
    try:
        result = bom.check_account(user)            
        temp = pd.DataFrame(result)
        temp = pd.DataFrame({'screen_name': [temp['user']['user_data']['screen_name']],
                             'cap_en': [temp['cap']['english']],
                             
                             'astroturf_raw_en': [temp['raw_scores']['english']['astroturf']],
                             'fake_follower_raw_en': [temp['raw_scores']['english']['fake_follower']],
                             'financial_raw_en': [temp['raw_scores']['english']['financial']],
                             'other_raw_en': [temp['raw_scores']['english']['other']],
                             'overall_raw_en': [temp['raw_scores']['english']['overall']],
                             'self_declared_raw_en': [temp['raw_scores']['english']['self_declared']],
                             'spammer_raw_en': [temp['raw_scores']['english']['spammer']],

                             'astroturf_display_en': [temp['display_scores']['english']['astroturf']],
                             'fake_follower_display_en': [temp['display_scores']['english']['fake_follower']],
                             'financial_display_en': [temp['display_scores']['english']['financial']],
                             'other_display_en': [temp['display_scores']['english']['other']],
                             'overall_display_en': [temp['display_scores']['english']['overall']],
                             'self_declared_display_en': [temp['display_scores']['english']['self_declared']],
                             'spammer_display_en': [temp['display_scores']['english']['spammer']],

                             'astroturf_raw_un': [temp['raw_scores']['universal']['astroturf']],
                             'fake_follower_raw_un': [temp['raw_scores']['universal']['fake_follower']],
                             'financial_raw_un': [temp['raw_scores']['universal']['financial']],
                             'other_raw_un': [temp['raw_scores']['universal']['other']],
                             'overall_raw_un': [temp['raw_scores']['universal']['overall']],
                             'self_declared_raw_un': [temp['raw_scores']['universal']['self_declared']],
                             'spammer_raw_un': [temp['raw_scores']['universal']['spammer']],

                             'astroturf_display_un': [temp['display_scores']['universal']['astroturf']],
                             'fake_follower_display_un': [temp['display_scores']['universal']['fake_follower']],
                             'financial_display_un': [temp['display_scores']['universal']['financial']],
                             'other_display_un': [temp['display_scores']['universal']['other']],
                             'overall_display_un': [temp['display_scores']['universal']['overall']],
                             'self_declared_display_un': [temp['display_scores']['universal']['self_declared']],
                             'spammer_display_un': [temp['display_scores']['universal']['spammer']]
                     })
        print(i)
        timestr = time.strftime("%m%d%Y_%H%M")
        temp.to_csv('data/seed_accounts'.csv")
        botometer_full.append(temp)

    except:
        pass
 
#Get the score
blt_twitter = botometer.BotometerLite(rapidapi_key=rapidapi_key, **twitter_app_auth)

screen_name_list = ['LotusOak2','ISRAEL_PREDATOR','thereal_truther','crwriter1','SNCCLA','mcfunny','paul_kangas','45HammerTime','doritmi','HomeAttention','Charbrevolution','9_11_IsAnInside','BeckyJohnson222','kidoctr','Iconoclastttt', 'Rosewind2007','PlumRemson','CoercedTaxSlave','kuriousmind93','PositivelyJoan']
blt_scores = blt_twitter.check_accounts_from_screen_names(screen_name_list)
blt_scores.append(pd.DataFrame(temp))
